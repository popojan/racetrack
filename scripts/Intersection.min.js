function Intersection(a){if(arguments.length>0){this.init(a)}}Intersection.prototype.init=function(a){this.status=a;this.points=new Array()};Intersection.prototype.appendPoint=function(a){this.points.push(a)};Intersection.prototype.appendPoints=function(a){this.points=this.points.concat(a)};Intersection.intersectShapes=function(c,b){var e=c.getIntersectionParams();var d=b.getIntersectionParams();var a;if(e!=null&&d!=null){if(e.name=="Path"){a=Intersection.intersectPathShape(c,b)}else{if(d.name=="Path"){a=Intersection.intersectPathShape(b,c)}else{var g;var f;if(e.name<d.name){g="intersect"+e.name+d.name;f=e.params.concat(d.params)}else{g="intersect"+d.name+e.name;f=d.params.concat(e.params)}if(!(g in Intersection)){throw new Error("Intersection not available: "+g)}a=Intersection[g].apply(null,f)}}}else{a=new Intersection("No Intersection")}return a};Intersection.intersectPathShape=function(b,a){return b.intersectShape(a)};Intersection.intersectBezier2Bezier2=function(O,M,L,o,m,l){var K,J;var q,r,t;var z,B,D;var w=0.0001;var v=new Intersection("No Intersection");K=M.multiply(-2);q=O.add(K.add(L));K=O.multiply(-2);J=M.multiply(2);r=K.add(J);t=new Point2D(O.x,O.y);K=m.multiply(-2);z=o.add(K.add(l));K=o.multiply(-2);J=m.multiply(2);B=K.add(J);D=new Point2D(o.x,o.y);var K=q.x*r.y-r.x*q.y;var J=z.x*r.y-r.x*z.y;var I=B.x*r.y-r.x*B.y;var H=r.x*(t.y-D.y)+r.y*(-t.x+D.x);var G=z.x*q.y-q.x*z.y;var F=B.x*q.y-q.x*B.y;var E=q.x*(t.y-D.y)+q.y*(-t.x+D.x);var h=new Polynomial(-G*G,-2*G*F,K*J-F*F-2*G*E,K*I-2*F*E,K*H-E*E);var n=h.getRoots();for(var C=0;C<n.length;C++){var x=n[C];if(0<=x&&x<=1){var p=new Polynomial(-q.x,-r.x,-t.x+D.x+x*B.x+x*x*z.x).getRoots();var u=new Polynomial(-q.y,-r.y,-t.y+D.y+x*B.y+x*x*z.y).getRoots();if(p.length>0&&u.length>0){checkRoots:for(var A=0;A<p.length;A++){var N=p[A];if(0<=N&&N<=1){for(var y=0;y<u.length;y++){if(Math.abs(N-u[y])<w){v.points.push(z.multiply(x*x).add(B.multiply(x).add(D)));break checkRoots}}}}}}}return v};Intersection.intersectBezier2Bezier3=function(O,N,M,x,w,v,u){var Y,X,W,U;var e,f,g;var F,G,H,I;var q=new Intersection("No Intersection");Y=N.multiply(-2);e=O.add(Y.add(M));Y=O.multiply(-2);X=N.multiply(2);f=Y.add(X);g=new Point2D(O.x,O.y);Y=x.multiply(-1);X=w.multiply(3);W=v.multiply(-3);U=Y.add(X.add(W.add(u)));F=new Vector2D(U.x,U.y);Y=x.multiply(3);X=w.multiply(-6);W=v.multiply(3);U=Y.add(X.add(W));G=new Vector2D(U.x,U.y);Y=x.multiply(-3);X=w.multiply(3);W=Y.add(X);H=new Vector2D(W.x,W.y);I=new Vector2D(x.x,x.y);var K=g.x*g.x;var t=g.y*g.y;var E=f.x*f.x;var o=f.y*f.y;var A=e.x*e.x;var n=e.y*e.y;var m=I.x*I.x;var Q=I.y*I.y;var h=H.x*H.x;var J=H.y*H.y;var V=G.x*G.x;var C=G.y*G.y;var P=F.x*F.x;var y=F.y*F.y;var B=new Polynomial(-2*e.x*e.y*F.x*F.y+A*y+n*P,-2*e.x*e.y*G.x*F.y-2*e.x*e.y*G.y*F.x+2*n*G.x*F.x+2*A*G.y*F.y,-2*e.x*H.x*e.y*F.y-2*e.x*e.y*H.y*F.x-2*e.x*e.y*G.x*G.y+2*H.x*n*F.x+n*V+A*(2*H.y*F.y+C),2*g.x*e.x*e.y*F.y+2*g.y*e.x*e.y*F.x+f.x*f.y*e.x*F.y+f.x*f.y*e.y*F.x-2*I.x*e.x*e.y*F.y-2*e.x*I.y*e.y*F.x-2*e.x*H.x*e.y*G.y-2*e.x*e.y*H.y*G.x-2*g.x*n*F.x-2*g.y*A*F.y+2*I.x*n*F.x+2*H.x*n*G.x-o*e.x*F.x-E*e.y*F.y+A*(2*I.y*F.y+2*H.y*G.y),2*g.x*e.x*e.y*G.y+2*g.y*e.x*e.y*G.x+f.x*f.y*e.x*G.y+f.x*f.y*e.y*G.x-2*I.x*e.x*e.y*G.y-2*e.x*I.y*e.y*G.x-2*e.x*H.x*e.y*H.y-2*g.x*n*G.x-2*g.y*A*G.y+2*I.x*n*G.x-o*e.x*G.x-E*e.y*G.y+h*n+A*(2*I.y*G.y+J),2*g.x*e.x*e.y*H.y+2*g.y*e.x*H.x*e.y+f.x*f.y*e.x*H.y+f.x*f.y*H.x*e.y-2*I.x*e.x*e.y*H.y-2*e.x*I.y*H.x*e.y-2*g.x*H.x*n-2*g.y*A*H.y+2*I.x*H.x*n-o*e.x*H.x-E*e.y*H.y+2*A*I.y*H.y,-2*g.x*g.y*e.x*e.y-g.x*f.x*f.y*e.y-g.y*f.x*f.y*e.x+2*g.x*e.x*I.y*e.y+2*g.y*I.x*e.x*e.y+f.x*I.x*f.y*e.y+f.x*f.y*e.x*I.y-2*I.x*e.x*I.y*e.y-2*g.x*I.x*n+g.x*o*e.x+g.y*E*e.y-2*g.y*A*I.y-I.x*o*e.x-E*I.y*e.y+K*n+t*A+m*n+A*Q);var r=B.getRootsInInterval(0,1);for(var T=0;T<r.length;T++){var L=r[T];var l=new Polynomial(e.x,f.x,g.x-I.x-L*H.x-L*L*G.x-L*L*L*F.x).getRoots();var D=new Polynomial(e.y,f.y,g.y-I.y-L*H.y-L*L*G.y-L*L*L*F.y).getRoots();if(l.length>0&&D.length>0){var p=0.0001;checkRoots:for(var S=0;S<l.length;S++){var z=l[S];if(0<=z&&z<=1){for(var R=0;R<D.length;R++){if(Math.abs(z-D[R])<p){q.points.push(F.multiply(L*L*L).add(G.multiply(L*L).add(H.multiply(L).add(I))));break checkRoots}}}}}}if(q.points.length>0){q.status="Intersection"}return q};Intersection.intersectBezier2Circle=function(e,d,b,f,a){return Intersection.intersectBezier2Ellipse(e,d,b,f,a,a)};Intersection.intersectBezier2Ellipse=function(r,p,o,k,d,c){var n,m;var e,g,j;var u=new Intersection("No Intersection");n=p.multiply(-2);e=r.add(n.add(o));n=r.multiply(-2);m=p.multiply(2);g=n.add(m);j=new Point2D(r.x,r.y);var h=d*d;var l=c*c;var q=new Polynomial(l*e.x*e.x+h*e.y*e.y,2*(l*e.x*g.x+h*e.y*g.y),l*(2*e.x*j.x+g.x*g.x)+h*(2*e.y*j.y+g.y*g.y)-2*(l*k.x*e.x+h*k.y*e.y),2*(l*g.x*(j.x-k.x)+h*g.y*(j.y-k.y)),l*(j.x*j.x+k.x*k.x)+h*(j.y*j.y+k.y*k.y)-2*(l*k.x*j.x+h*k.y*j.y)-h*l).getRoots();for(var f=0;f<q.length;f++){var s=q[f];if(0<=s&&s<=1){u.points.push(e.multiply(s*s).add(g.multiply(s).add(j)))}}if(u.points.length>0){u.status="Intersection"}return u};Intersection.intersectBezier2Line=function(f,e,d,x,v){var u,s;var k,l,o;var g;var m;var p=x.min(v);var q=x.max(v);var h=new Intersection("No Intersection");u=e.multiply(-2);k=f.add(u.add(d));u=f.multiply(-2);s=e.multiply(2);l=u.add(s);o=new Point2D(f.x,f.y);m=new Vector2D(x.y-v.y,v.x-x.x);g=x.x*v.y-v.x*x.y;roots=new Polynomial(m.dot(k),m.dot(l),m.dot(o)+g).getRoots();for(var r=0;r<roots.length;r++){var j=roots[r];if(0<=j&&j<=1){var c=f.lerp(e,j);var y=e.lerp(d,j);var w=c.lerp(y,j);if(x.x==v.x){if(p.y<=w.y&&w.y<=q.y){h.status="Intersection";h.appendPoint(w)}}else{if(x.y==v.y){if(p.x<=w.x&&w.x<=q.x){h.status="Intersection";h.appendPoint(w)}}else{if(w.gte(p)&&w.lte(q)){h.status="Intersection";h.appendPoint(w)}}}}}return h};Intersection.intersectBezier2Polygon=function(j,g,f,h){var k=new Intersection("No Intersection");var c=h.length;for(var e=0;e<c;e++){var b=h[e];var a=h[(e+1)%c];var d=Intersection.intersectBezier2Line(j,g,f,b,a);k.appendPoints(d.points)}if(k.points.length>0){k.status="Intersection"}return k};Intersection.intersectBezier2Rectangle=function(m,l,k,b,a){var d=b.min(a);var j=b.max(a);var c=new Point2D(j.x,d.y);var i=new Point2D(d.x,j.y);var h=Intersection.intersectBezier2Line(m,l,k,d,c);var g=Intersection.intersectBezier2Line(m,l,k,c,j);var f=Intersection.intersectBezier2Line(m,l,k,j,i);var e=Intersection.intersectBezier2Line(m,l,k,i,d);var n=new Intersection("No Intersection");n.appendPoints(h.points);n.appendPoints(g.points);n.appendPoints(f.points);n.appendPoints(e.points);if(n.points.length>0){n.status="Intersection"}return n};Intersection.intersectBezier3Bezier3=function(ae,ac,ab,aa,I,G,F,E){var aq,ap,ao,am;var e,f,g,h;var S,T,U,V;var y=new Intersection("No Intersection");aq=ae.multiply(-1);ap=ac.multiply(3);ao=ab.multiply(-3);am=aq.add(ap.add(ao.add(aa)));e=new Vector2D(am.x,am.y);aq=ae.multiply(3);ap=ac.multiply(-6);ao=ab.multiply(3);am=aq.add(ap.add(ao));f=new Vector2D(am.x,am.y);aq=ae.multiply(-3);ap=ac.multiply(3);ao=aq.add(ap);g=new Vector2D(ao.x,ao.y);h=new Vector2D(ae.x,ae.y);aq=I.multiply(-1);ap=G.multiply(3);ao=F.multiply(-3);am=aq.add(ap.add(ao.add(E)));S=new Vector2D(am.x,am.y);aq=I.multiply(3);ap=G.multiply(-6);ao=F.multiply(3);am=aq.add(ap.add(ao));T=new Vector2D(am.x,am.y);aq=I.multiply(-3);ap=G.multiply(3);ao=aq.add(ap);U=new Vector2D(ao.x,ao.y);V=new Vector2D(I.x,I.y);var Y=h.x*h.x;var X=h.x*h.x*h.x;var D=h.y*h.y;var B=h.y*h.y*h.y;var R=g.x*g.x;var Q=g.x*g.x*g.x;var w=g.y*g.y;var v=g.y*g.y*g.y;var M=f.x*f.x;var L=f.x*f.x*f.x;var u=f.y*f.y;var t=f.y*f.y*f.y;var A=e.x*e.x;var z=e.x*e.x*e.x;var o=e.y*e.y;var n=e.y*e.y*e.y;var r=V.x*V.x;var q=V.x*V.x*V.x;var ah=V.y*V.y;var ag=V.y*V.y*V.y;var m=U.x*U.x;var l=U.x*U.x*U.x;var W=U.y*U.y;var an=T.x*T.x;var al=T.x*T.x*T.x;var O=T.y*T.y;var af=S.x*S.x;var ad=S.x*S.x*S.x;var J=S.y*S.y;var H=S.y*S.y*S.y;var N=new Polynomial(-z*H+n*ad-3*e.x*o*af*S.y+3*A*e.y*S.x*J,-6*e.x*T.x*o*S.x*S.y+6*A*e.y*T.y*S.x*S.y+3*T.x*n*af-3*z*T.y*J-3*e.x*o*T.y*af+3*A*T.x*e.y*J,-6*U.x*e.x*o*S.x*S.y-6*e.x*T.x*o*T.y*S.x+6*A*T.x*e.y*T.y*S.y+3*U.x*n*af+3*an*n*S.x+3*U.x*A*e.y*J-3*e.x*U.y*o*af-3*e.x*an*o*S.y+A*e.y*S.x*(6*U.y*S.y+3*O)+z*(-U.y*J-2*O*S.y-S.y*(2*U.y*S.y+O)),g.x*f.y*e.x*e.y*S.x*S.y-g.y*f.x*e.x*e.y*S.x*S.y+6*U.x*T.x*n*S.x+3*g.x*f.x*e.x*e.y*J+6*h.x*e.x*o*S.x*S.y-3*g.x*f.x*o*S.x*S.y-3*g.y*f.y*e.x*e.y*af-6*h.y*A*e.y*S.x*S.y-6*V.x*e.x*o*S.x*S.y+3*g.y*f.y*A*S.x*S.y-2*f.x*u*e.x*S.x*S.y-6*U.x*e.x*T.x*o*S.y-6*U.x*e.x*o*T.y*S.x-6*e.x*U.y*T.x*o*S.x+6*U.x*A*e.y*T.y*S.y+2*M*f.y*e.y*S.x*S.y+al*n-3*h.x*n*af+3*h.y*z*J+3*V.x*n*af+t*e.x*af-L*e.y*J-3*h.x*A*e.y*J+3*h.y*e.x*o*af-2*g.x*f.y*A*J+g.x*f.y*o*af-g.y*f.x*A*J+2*g.y*f.x*o*af+3*V.x*A*e.y*J-f.x*u*e.y*af-3*V.y*e.x*o*af+M*f.y*e.x*J-3*e.x*an*o*T.y+A*e.y*S.x*(6*V.y*S.y+6*U.y*T.y)+A*T.x*e.y*(6*U.y*S.y+3*O)+z*(-2*U.y*T.y*S.y-V.y*J-T.y*(2*U.y*S.y+O)-S.y*(2*V.y*S.y+2*U.y*T.y)),6*g.x*f.x*e.x*e.y*T.y*S.y+g.x*f.y*e.x*T.x*e.y*S.y+g.x*f.y*e.x*e.y*T.y*S.x-g.y*f.x*e.x*T.x*e.y*S.y-g.y*f.x*e.x*e.y*T.y*S.x-6*g.y*f.y*e.x*T.x*e.y*S.x-6*h.x*T.x*n*S.x+6*V.x*T.x*n*S.x+6*h.y*z*T.y*S.y+2*t*e.x*T.x*S.x-2*L*e.y*T.y*S.y+6*h.x*e.x*T.x*o*S.y+6*h.x*e.x*o*T.y*S.x+6*h.y*e.x*T.x*o*S.x-3*g.x*f.x*T.x*o*S.y-3*g.x*f.x*o*T.y*S.x+2*g.x*f.y*T.x*o*S.x+4*g.y*f.x*T.x*o*S.x-6*h.x*A*e.y*T.y*S.y-6*h.y*A*T.x*e.y*S.y-6*h.y*A*e.y*T.y*S.x-4*g.x*f.y*A*T.y*S.y-6*V.x*e.x*T.x*o*S.y-6*V.x*e.x*o*T.y*S.x-2*g.y*f.x*A*T.y*S.y+3*g.y*f.y*A*T.x*S.y+3*g.y*f.y*A*T.y*S.x-2*f.x*u*e.x*T.x*S.y-2*f.x*u*e.x*T.y*S.x-2*f.x*u*T.x*e.y*S.x-6*V.y*e.x*T.x*o*S.x-6*U.x*e.x*U.y*o*S.x-6*U.x*e.x*T.x*o*T.y+6*V.x*A*e.y*T.y*S.y+2*M*f.y*e.x*T.y*S.y+2*M*f.y*T.x*e.y*S.y+2*M*f.y*e.y*T.y*S.x+3*U.x*an*n+3*m*n*S.x-3*e.x*U.y*an*o-3*m*e.x*o*S.y+A*T.x*e.y*(6*V.y*S.y+6*U.y*T.y)+A*e.y*S.x*(6*V.y*T.y+3*W)+U.x*A*e.y*(6*U.y*S.y+3*O)+z*(-2*V.y*T.y*S.y-S.y*(2*V.y*T.y+W)-U.y*(2*U.y*S.y+O)-T.y*(2*V.y*S.y+2*U.y*T.y)),g.x*U.x*f.y*e.x*e.y*S.y+g.x*f.y*e.x*U.y*e.y*S.x+g.x*f.y*e.x*T.x*e.y*T.y-g.y*f.x*U.x*e.x*e.y*S.y-g.y*f.x*e.x*U.y*e.y*S.x-g.y*f.x*e.x*T.x*e.y*T.y-6*g.y*U.x*f.y*e.x*e.y*S.x-6*h.x*U.x*n*S.x+6*V.x*U.x*n*S.x+2*U.x*t*e.x*S.x+6*h.x*U.x*e.x*o*S.y+6*h.x*e.x*U.y*o*S.x+6*h.x*e.x*T.x*o*T.y+6*h.y*U.x*e.x*o*S.x-3*g.x*f.x*U.x*o*S.y-3*g.x*f.x*U.y*o*S.x-3*g.x*f.x*T.x*o*T.y+2*g.x*U.x*f.y*o*S.x+4*g.y*f.x*U.x*o*S.x-6*h.y*U.x*A*e.y*S.y-6*h.y*A*U.y*e.y*S.x-6*h.y*A*T.x*e.y*T.y-6*V.x*U.x*e.x*o*S.y-6*V.x*e.x*U.y*o*S.x-6*V.x*e.x*T.x*o*T.y+3*g.y*U.x*f.y*A*S.y-3*g.y*f.y*e.x*an*e.y+3*g.y*f.y*A*U.y*S.x+3*g.y*f.y*A*T.x*T.y-2*f.x*U.x*u*e.x*S.y-2*f.x*U.x*u*e.y*S.x-2*f.x*u*e.x*U.y*S.x-2*f.x*u*e.x*T.x*T.y-6*V.y*U.x*e.x*o*S.x-6*U.x*e.x*U.y*T.x*o+6*V.y*A*U.y*e.y*S.x+2*M*U.x*f.y*e.y*S.y+2*M*f.y*U.y*e.y*S.x+2*M*f.y*T.x*e.y*T.y-3*h.x*an*n+3*V.x*an*n+3*m*T.x*n+t*e.x*an+3*h.y*e.x*an*o+g.x*f.y*an*o+2*g.y*f.x*an*o-f.x*u*an*e.y-3*V.y*e.x*an*o-3*m*e.x*o*T.y+M*f.y*e.x*(2*U.y*S.y+O)+g.x*f.x*e.x*e.y*(6*U.y*S.y+3*O)+U.x*A*e.y*(6*V.y*S.y+6*U.y*T.y)+L*e.y*(-2*U.y*S.y-O)+h.y*z*(6*U.y*S.y+3*O)+g.y*f.x*A*(-2*U.y*S.y-O)+g.x*f.y*A*(-4*U.y*S.y-2*O)+h.x*A*e.y*(-6*U.y*S.y-3*O)+A*T.x*e.y*(6*V.y*T.y+3*W)+V.x*A*e.y*(6*U.y*S.y+3*O)+z*(-2*V.y*U.y*S.y-T.y*(2*V.y*T.y+W)-V.y*(2*U.y*S.y+O)-U.y*(2*V.y*S.y+2*U.y*T.y)),-h.x*g.x*f.y*e.x*e.y*S.y+h.x*g.y*f.x*e.x*e.y*S.y+6*h.x*g.y*f.y*e.x*e.y*S.x-6*h.y*g.x*f.x*e.x*e.y*S.y-h.y*g.x*f.y*e.x*e.y*S.x+h.y*g.y*f.x*e.x*e.y*S.x+g.x*g.y*f.x*f.y*e.x*S.y-g.x*g.y*f.x*f.y*e.y*S.x+g.x*V.x*f.y*e.x*e.y*S.y+g.x*V.y*f.y*e.x*e.y*S.x+g.x*U.x*f.y*e.x*e.y*T.y+g.x*f.y*e.x*U.y*T.x*e.y-V.x*g.y*f.x*e.x*e.y*S.y-6*V.x*g.y*f.y*e.x*e.y*S.x-g.y*f.x*V.y*e.x*e.y*S.x-g.y*f.x*U.x*e.x*e.y*T.y-g.y*f.x*e.x*U.y*T.x*e.y-6*g.y*U.x*f.y*e.x*T.x*e.y-6*h.x*V.x*n*S.x-6*h.x*U.x*T.x*n-2*h.x*t*e.x*S.x+6*V.x*U.x*T.x*n+2*V.x*t*e.x*S.x+2*U.x*t*e.x*T.x+2*h.y*L*e.y*S.y-6*h.x*h.y*e.x*o*S.x+3*h.x*g.x*f.x*o*S.y-2*h.x*g.x*f.y*o*S.x-4*h.x*g.y*f.x*o*S.x+3*h.y*g.x*f.x*o*S.x+6*h.x*h.y*A*e.y*S.y+6*h.x*V.x*e.x*o*S.y-3*h.x*g.y*f.y*A*S.y+2*h.x*f.x*u*e.x*S.y+2*h.x*f.x*u*e.y*S.x+6*h.x*V.y*e.x*o*S.x+6*h.x*U.x*e.x*o*T.y+6*h.x*e.x*U.y*T.x*o+4*h.y*g.x*f.y*A*S.y+6*h.y*V.x*e.x*o*S.x+2*h.y*g.y*f.x*A*S.y-3*h.y*g.y*f.y*A*S.x+2*h.y*f.x*u*e.x*S.x+6*h.y*U.x*e.x*T.x*o-3*g.x*V.x*f.x*o*S.y+2*g.x*V.x*f.y*o*S.x+g.x*g.y*u*e.x*S.x-3*g.x*f.x*V.y*o*S.x-3*g.x*f.x*U.x*o*T.y-3*g.x*f.x*U.y*T.x*o+2*g.x*U.x*f.y*T.x*o+4*V.x*g.y*f.x*o*S.x+4*g.y*f.x*U.x*T.x*o-2*h.x*M*f.y*e.y*S.y-6*h.y*V.x*A*e.y*S.y-6*h.y*V.y*A*e.y*S.x-6*h.y*U.x*A*e.y*T.y-2*h.y*M*f.y*e.x*S.y-2*h.y*M*f.y*e.y*S.x-6*h.y*A*U.y*T.x*e.y-g.x*g.y*M*e.y*S.y-2*g.x*w*e.x*e.y*S.x+3*V.x*g.y*f.y*A*S.y-2*V.x*f.x*u*e.x*S.y-2*V.x*f.x*u*e.y*S.x-6*V.x*V.y*e.x*o*S.x-6*V.x*U.x*e.x*o*T.y-6*V.x*e.x*U.y*T.x*o+3*g.y*V.y*f.y*A*S.x+3*g.y*U.x*f.y*A*T.y+3*g.y*f.y*A*U.y*T.x-2*f.x*V.y*u*e.x*S.x-2*f.x*U.x*u*e.x*T.y-2*f.x*U.x*u*T.x*e.y-2*f.x*u*e.x*U.y*T.x-6*V.y*U.x*e.x*T.x*o-w*f.x*f.y*e.x*S.x+2*V.x*M*f.y*e.y*S.y+6*V.y*A*U.y*T.x*e.y+2*R*g.y*e.x*e.y*S.y+R*f.x*f.y*e.y*S.y+2*M*V.y*f.y*e.y*S.x+2*M*U.x*f.y*e.y*T.y+2*M*f.y*U.y*T.x*e.y+l*n+3*Y*n*S.x-3*D*z*S.y+3*r*n*S.x+v*A*S.x-Q*o*S.y-g.x*w*A*S.y+R*g.y*o*S.x-3*Y*e.x*o*S.y+3*D*A*e.y*S.x-R*u*e.x*S.y+w*M*e.y*S.x-3*m*e.x*U.y*o-3*r*e.x*o*S.y+3*ah*A*e.y*S.x+g.x*f.x*e.x*e.y*(6*V.y*S.y+6*U.y*T.y)+L*e.y*(-2*V.y*S.y-2*U.y*T.y)+h.y*z*(6*V.y*S.y+6*U.y*T.y)+g.y*f.x*A*(-2*V.y*S.y-2*U.y*T.y)+M*f.y*e.x*(2*V.y*S.y+2*U.y*T.y)+g.x*f.y*A*(-4*V.y*S.y-4*U.y*T.y)+h.x*A*e.y*(-6*V.y*S.y-6*U.y*T.y)+V.x*A*e.y*(6*V.y*S.y+6*U.y*T.y)+U.x*A*e.y*(6*V.y*T.y+3*W)+z*(-2*V.y*U.y*T.y-ah*S.y-U.y*(2*V.y*T.y+W)-V.y*(2*V.y*S.y+2*U.y*T.y)),-h.x*g.x*f.y*e.x*e.y*T.y+h.x*g.y*f.x*e.x*e.y*T.y+6*h.x*g.y*f.y*e.x*T.x*e.y-6*h.y*g.x*f.x*e.x*e.y*T.y-h.y*g.x*f.y*e.x*T.x*e.y+h.y*g.y*f.x*e.x*T.x*e.y+g.x*g.y*f.x*f.y*e.x*T.y-g.x*g.y*f.x*f.y*T.x*e.y+g.x*V.x*f.y*e.x*e.y*T.y+g.x*V.y*f.y*e.x*T.x*e.y+g.x*U.x*f.y*e.x*U.y*e.y-V.x*g.y*f.x*e.x*e.y*T.y-6*V.x*g.y*f.y*e.x*T.x*e.y-g.y*f.x*V.y*e.x*T.x*e.y-g.y*f.x*U.x*e.x*U.y*e.y-6*h.x*V.x*T.x*n-2*h.x*t*e.x*T.x+2*V.x*t*e.x*T.x+2*h.y*L*e.y*T.y-6*h.x*h.y*e.x*T.x*o+3*h.x*g.x*f.x*o*T.y-2*h.x*g.x*f.y*T.x*o-4*h.x*g.y*f.x*T.x*o+3*h.y*g.x*f.x*T.x*o+6*h.x*h.y*A*e.y*T.y+6*h.x*V.x*e.x*o*T.y-3*h.x*g.y*f.y*A*T.y+2*h.x*f.x*u*e.x*T.y+2*h.x*f.x*u*T.x*e.y+6*h.x*V.y*e.x*T.x*o+6*h.x*U.x*e.x*U.y*o+4*h.y*g.x*f.y*A*T.y+6*h.y*V.x*e.x*T.x*o+2*h.y*g.y*f.x*A*T.y-3*h.y*g.y*f.y*A*T.x+2*h.y*f.x*u*e.x*T.x-3*g.x*V.x*f.x*o*T.y+2*g.x*V.x*f.y*T.x*o+g.x*g.y*u*e.x*T.x-3*g.x*f.x*V.y*T.x*o-3*g.x*f.x*U.x*U.y*o+4*V.x*g.y*f.x*T.x*o-2*h.x*M*f.y*e.y*T.y-6*h.y*V.x*A*e.y*T.y-6*h.y*V.y*A*T.x*e.y-6*h.y*U.x*A*U.y*e.y-2*h.y*M*f.y*e.x*T.y-2*h.y*M*f.y*T.x*e.y-g.x*g.y*M*e.y*T.y-2*g.x*w*e.x*T.x*e.y+3*V.x*g.y*f.y*A*T.y-2*V.x*f.x*u*e.x*T.y-2*V.x*f.x*u*T.x*e.y-6*V.x*V.y*e.x*T.x*o-6*V.x*U.x*e.x*U.y*o+3*g.y*V.y*f.y*A*T.x+3*g.y*U.x*f.y*A*U.y-2*f.x*V.y*u*e.x*T.x-2*f.x*U.x*u*e.x*U.y-w*f.x*f.y*e.x*T.x+2*V.x*M*f.y*e.y*T.y-3*g.y*m*f.y*e.x*e.y+6*V.y*U.x*A*U.y*e.y+2*R*g.y*e.x*e.y*T.y+R*f.x*f.y*e.y*T.y+2*M*V.y*f.y*T.x*e.y+2*M*U.x*f.y*U.y*e.y-3*h.x*m*n+3*V.x*m*n+3*Y*T.x*n-3*D*z*T.y+3*r*T.x*n+m*t*e.x+v*A*T.x-Q*o*T.y+3*h.y*m*e.x*o-g.x*w*A*T.y+g.x*m*f.y*o+2*g.y*f.x*m*o+R*g.y*T.x*o-f.x*m*u*e.y-3*V.y*m*e.x*o-3*Y*e.x*o*T.y+3*D*A*T.x*e.y-R*u*e.x*T.y+w*M*T.x*e.y-3*r*e.x*o*T.y+3*ah*A*T.x*e.y+M*f.y*e.x*(2*V.y*T.y+W)+g.x*f.x*e.x*e.y*(6*V.y*T.y+3*W)+L*e.y*(-2*V.y*T.y-W)+h.y*z*(6*V.y*T.y+3*W)+g.y*f.x*A*(-2*V.y*T.y-W)+g.x*f.y*A*(-4*V.y*T.y-2*W)+h.x*A*e.y*(-6*V.y*T.y-3*W)+V.x*A*e.y*(6*V.y*T.y+3*W)+z*(-2*V.y*W-ah*T.y-V.y*(2*V.y*T.y+W)),-h.x*g.x*f.y*e.x*U.y*e.y+h.x*g.y*f.x*e.x*U.y*e.y+6*h.x*g.y*U.x*f.y*e.x*e.y-6*h.y*g.x*f.x*e.x*U.y*e.y-h.y*g.x*U.x*f.y*e.x*e.y+h.y*g.y*f.x*U.x*e.x*e.y-g.x*g.y*f.x*U.x*f.y*e.y+g.x*g.y*f.x*f.y*e.x*U.y+g.x*V.x*f.y*e.x*U.y*e.y+6*g.x*f.x*V.y*e.x*U.y*e.y+g.x*V.y*U.x*f.y*e.x*e.y-V.x*g.y*f.x*e.x*U.y*e.y-6*V.x*g.y*U.x*f.y*e.x*e.y-g.y*f.x*V.y*U.x*e.x*e.y-6*h.x*V.x*U.x*n-2*h.x*U.x*t*e.x+6*h.y*V.y*z*U.y+2*V.x*U.x*t*e.x+2*h.y*L*U.y*e.y-2*L*V.y*U.y*e.y-6*h.x*h.y*U.x*e.x*o+3*h.x*g.x*f.x*U.y*o-2*h.x*g.x*U.x*f.y*o-4*h.x*g.y*f.x*U.x*o+3*h.y*g.x*f.x*U.x*o+6*h.x*h.y*A*U.y*e.y+6*h.x*V.x*e.x*U.y*o-3*h.x*g.y*f.y*A*U.y+2*h.x*f.x*U.x*u*e.y+2*h.x*f.x*u*e.x*U.y+6*h.x*V.y*U.x*e.x*o+4*h.y*g.x*f.y*A*U.y+6*h.y*V.x*U.x*e.x*o+2*h.y*g.y*f.x*A*U.y-3*h.y*g.y*U.x*f.y*A+2*h.y*f.x*U.x*u*e.x-3*g.x*V.x*f.x*U.y*o+2*g.x*V.x*U.x*f.y*o+g.x*g.y*U.x*u*e.x-3*g.x*f.x*V.y*U.x*o+4*V.x*g.y*f.x*U.x*o-6*h.x*V.y*A*U.y*e.y-2*h.x*M*f.y*U.y*e.y-6*h.y*V.x*A*U.y*e.y-6*h.y*V.y*U.x*A*e.y-2*h.y*M*U.x*f.y*e.y-2*h.y*M*f.y*e.x*U.y-g.x*g.y*M*U.y*e.y-4*g.x*V.y*f.y*A*U.y-2*g.x*w*U.x*e.x*e.y+3*V.x*g.y*f.y*A*U.y-2*V.x*f.x*U.x*u*e.y-2*V.x*f.x*u*e.x*U.y-6*V.x*V.y*U.x*e.x*o-2*g.y*f.x*V.y*A*U.y+3*g.y*V.y*U.x*f.y*A-2*f.x*V.y*U.x*u*e.x-w*f.x*U.x*f.y*e.x+6*V.x*V.y*A*U.y*e.y+2*V.x*M*f.y*U.y*e.y+2*R*g.y*e.x*U.y*e.y+R*f.x*f.y*U.y*e.y+2*M*V.y*U.x*f.y*e.y+2*M*V.y*f.y*e.x*U.y+3*Y*U.x*n-3*D*z*U.y+3*r*U.x*n+v*U.x*A-Q*U.y*o-3*ah*z*U.y-g.x*w*A*U.y+R*g.y*U.x*o-3*Y*e.x*U.y*o+3*D*U.x*A*e.y-R*u*e.x*U.y+w*M*U.x*e.y-3*r*e.x*U.y*o+3*ah*U.x*A*e.y,h.x*h.y*g.x*f.y*e.x*e.y-h.x*h.y*g.y*f.x*e.x*e.y+h.x*g.x*g.y*f.x*f.y*e.y-h.y*g.x*g.y*f.x*f.y*e.x-h.x*g.x*V.y*f.y*e.x*e.y+6*h.x*V.x*g.y*f.y*e.x*e.y+h.x*g.y*f.x*V.y*e.x*e.y-h.y*g.x*V.x*f.y*e.x*e.y-6*h.y*g.x*f.x*V.y*e.x*e.y+h.y*V.x*g.y*f.x*e.x*e.y-g.x*V.x*g.y*f.x*f.y*e.y+g.x*g.y*f.x*V.y*f.y*e.x+g.x*V.x*V.y*f.y*e.x*e.y-V.x*g.y*f.x*V.y*e.x*e.y-2*h.x*V.x*t*e.x+2*h.y*L*V.y*e.y-3*h.x*h.y*g.x*f.x*o-6*h.x*h.y*V.x*e.x*o+3*h.x*h.y*g.y*f.y*A-2*h.x*h.y*f.x*u*e.x-2*h.x*g.x*V.x*f.y*o-h.x*g.x*g.y*u*e.x+3*h.x*g.x*f.x*V.y*o-4*h.x*V.x*g.y*f.x*o+3*h.y*g.x*V.x*f.x*o+6*h.x*h.y*V.y*A*e.y+2*h.x*h.y*M*f.y*e.y+2*h.x*g.x*w*e.x*e.y+2*h.x*V.x*f.x*u*e.y+6*h.x*V.x*V.y*e.x*o-3*h.x*g.y*V.y*f.y*A+2*h.x*f.x*V.y*u*e.x+h.x*w*f.x*f.y*e.x+h.y*g.x*g.y*M*e.y+4*h.y*g.x*V.y*f.y*A-3*h.y*V.x*g.y*f.y*A+2*h.y*V.x*f.x*u*e.x+2*h.y*g.y*f.x*V.y*A+g.x*V.x*g.y*u*e.x-3*g.x*V.x*f.x*V.y*o-2*h.x*M*V.y*f.y*e.y-6*h.y*V.x*V.y*A*e.y-2*h.y*V.x*M*f.y*e.y-2*h.y*R*g.y*e.x*e.y-h.y*R*f.x*f.y*e.y-2*h.y*M*V.y*f.y*e.x-2*g.x*V.x*w*e.x*e.y-g.x*g.y*M*V.y*e.y+3*V.x*g.y*V.y*f.y*A-2*V.x*f.x*V.y*u*e.x-V.x*w*f.x*f.y*e.x+3*D*g.x*f.x*e.x*e.y+3*g.x*f.x*ah*e.x*e.y+2*V.x*M*V.y*f.y*e.y-3*Y*g.y*f.y*e.x*e.y+2*R*g.y*V.y*e.x*e.y+R*f.x*V.y*f.y*e.y-3*r*g.y*f.y*e.x*e.y-X*n+B*z+q*n-ag*z-3*h.x*r*n-h.x*v*A+3*Y*V.x*n+h.y*Q*o+3*h.y*ah*z+V.x*v*A+Y*t*e.x-3*D*V.y*z-D*L*e.y+r*t*e.x-Q*V.y*o-L*ah*e.y-h.x*R*g.y*o+h.y*g.x*w*A-3*h.x*D*A*e.y-h.x*w*M*e.y+h.y*R*u*e.x-g.x*w*V.y*A+3*Y*h.y*e.x*o+Y*g.x*f.y*o+2*Y*g.y*f.x*o-2*D*g.x*f.y*A-D*g.y*f.x*A+R*V.x*g.y*o-3*h.x*ah*A*e.y+3*h.y*r*e.x*o+g.x*r*f.y*o-2*g.x*ah*f.y*A+V.x*w*M*e.y-g.y*f.x*ah*A-Y*f.x*u*e.y-3*Y*V.y*e.x*o+3*D*V.x*A*e.y+D*M*f.y*e.x-R*V.y*u*e.x+2*r*g.y*f.x*o+3*V.x*ah*A*e.y-r*f.x*u*e.y-3*r*V.y*e.x*o+M*ah*f.y*e.x);var C=N.getRootsInInterval(0,1);for(var ak=0;ak<C.length;ak++){var Z=C[ak];var p=new Polynomial(e.x,f.x,g.x,h.x-V.x-Z*U.x-Z*Z*T.x-Z*Z*Z*S.x).getRoots();var P=new Polynomial(e.y,f.y,g.y,h.y-V.y-Z*U.y-Z*Z*T.y-Z*Z*Z*S.y).getRoots();if(p.length>0&&P.length>0){var x=0.0001;checkRoots:for(var aj=0;aj<p.length;aj++){var K=p[aj];if(0<=K&&K<=1){for(var ai=0;ai<P.length;ai++){if(Math.abs(K-P[ai])<x){y.points.push(S.multiply(Z*Z*Z).add(T.multiply(Z*Z).add(U.multiply(Z).add(V))));break checkRoots}}}}}}if(y.points.length>0){y.status="Intersection"}return y};Intersection.intersectBezier3Circle=function(f,e,d,b,g,a){return Intersection.intersectBezier3Ellipse(f,e,d,b,g,a,a)};Intersection.intersectBezier3Ellipse=function(h,g,f,e,n,l,k){var B,A,z,y;var s,u,v,w;var p=new Intersection("No Intersection");B=h.multiply(-1);A=g.multiply(3);z=f.multiply(-3);y=B.add(A.add(z.add(e)));s=new Vector2D(y.x,y.y);B=h.multiply(3);A=g.multiply(-6);z=f.multiply(3);y=B.add(A.add(z));u=new Vector2D(y.x,y.y);B=h.multiply(-3);A=g.multiply(3);z=B.add(A);v=new Vector2D(z.x,z.y);w=new Vector2D(h.x,h.y);var r=l*l;var j=k*k;var m=new Polynomial(s.x*s.x*j+s.y*s.y*r,2*(s.x*u.x*j+s.y*u.y*r),2*(s.x*v.x*j+s.y*v.y*r)+u.x*u.x*j+u.y*u.y*r,2*s.x*j*(w.x-n.x)+2*s.y*r*(w.y-n.y)+2*(u.x*v.x*j+u.y*v.y*r),2*u.x*j*(w.x-n.x)+2*u.y*r*(w.y-n.y)+v.x*v.x*j+v.y*v.y*r,2*v.x*j*(w.x-n.x)+2*v.y*r*(w.y-n.y),w.x*w.x*j-2*w.y*n.y*r-2*w.x*n.x*j+w.y*w.y*r+n.x*n.x*j+n.y*n.y*r-r*j);var o=m.getRootsInInterval(0,1);for(var x=0;x<o.length;x++){var q=o[x];p.points.push(s.multiply(q*q*q).add(u.multiply(q*q).add(v.multiply(q).add(w))))}if(p.points.length>0){p.status="Intersection"}return p};Intersection.intersectBezier3Line=function(h,g,f,e,G,E){var C,A,y,x;var o,p,q,s;var j;var r;var u=G.min(E);var w=G.max(E);var k=new Intersection("No Intersection");C=h.multiply(-1);A=g.multiply(3);y=f.multiply(-3);x=C.add(A.add(y.add(e)));o=new Vector2D(x.x,x.y);C=h.multiply(3);A=g.multiply(-6);y=f.multiply(3);x=C.add(A.add(y));p=new Vector2D(x.x,x.y);C=h.multiply(-3);A=g.multiply(3);y=C.add(A);q=new Vector2D(y.x,y.y);s=new Vector2D(h.x,h.y);r=new Vector2D(G.y-E.y,E.x-G.x);j=G.x*E.y-E.x*G.y;roots=new Polynomial(r.dot(o),r.dot(p),r.dot(q),r.dot(s)+j).getRoots();for(var v=0;v<roots.length;v++){var l=roots[v];if(0<=l&&l<=1){var H=h.lerp(g,l);var F=g.lerp(f,l);var D=f.lerp(e,l);var B=H.lerp(F,l);var z=F.lerp(D,l);var m=B.lerp(z,l);if(G.x==E.x){if(u.y<=m.y&&m.y<=w.y){k.status="Intersection";k.appendPoint(m)}}else{if(G.y==E.y){if(u.x<=m.x&&m.x<=w.x){k.status="Intersection";k.appendPoint(m)}}else{if(m.gte(u)&&m.lte(w)){k.status="Intersection";k.appendPoint(m)}}}}}return k};Intersection.intersectBezier3Polygon=function(k,h,g,f,j){var l=new Intersection("No Intersection");var c=j.length;for(var e=0;e<c;e++){var b=j[e];var a=j[(e+1)%c];var d=Intersection.intersectBezier3Line(k,h,g,f,b,a);l.appendPoints(d.points)}if(l.points.length>0){l.status="Intersection"}return l};Intersection.intersectBezier3Rectangle=function(n,m,l,k,b,a){var d=b.min(a);var j=b.max(a);var c=new Point2D(j.x,d.y);var i=new Point2D(d.x,j.y);var h=Intersection.intersectBezier3Line(n,m,l,k,d,c);var g=Intersection.intersectBezier3Line(n,m,l,k,c,j);var f=Intersection.intersectBezier3Line(n,m,l,k,j,i);var e=Intersection.intersectBezier3Line(n,m,l,k,i,d);var o=new Intersection("No Intersection");o.appendPoints(h.points);o.appendPoints(g.points);o.appendPoints(f.points);o.appendPoints(e.points);if(o.points.length>0){o.status="Intersection"}return o};Intersection.intersectCircleCircle=function(i,f,g,e){var o;var c=f+e;var k=Math.abs(f-e);var n=i.distanceFrom(g);if(n>c){o=new Intersection("Outside")}else{if(n<k){o=new Intersection("Inside")}else{o=new Intersection("Intersection");var m=(f*f-e*e+n*n)/(2*n);var j=Math.sqrt(f*f-m*m);var d=i.lerp(g,m/n);var l=j/n;o.points.push(new Point2D(d.x-l*(g.y-i.y),d.y+l*(g.x-i.x)));o.points.push(new Point2D(d.x+l*(g.y-i.y),d.y-l*(g.x-i.x)))}}return o};Intersection.intersectCircleEllipse=function(e,b,a,d,c){return Intersection.intersectEllipseEllipse(e,b,b,a,d,c)};Intersection.intersectCircleLine=function(m,d,i,g){var p;var o=(g.x-i.x)*(g.x-i.x)+(g.y-i.y)*(g.y-i.y);var n=2*((g.x-i.x)*(i.x-m.x)+(g.y-i.y)*(i.y-m.y));var k=m.x*m.x+m.y*m.y+i.x*i.x+i.y*i.y-2*(m.x*i.x+m.y*i.y)-d*d;var f=n*n-4*o*k;if(f<0){p=new Intersection("Outside")}else{if(f==0){p=new Intersection("Tangent")}else{var l=Math.sqrt(f);var j=(-n+l)/(2*o);var h=(-n-l)/(2*o);if((j<0||j>1)&&(h<0||h>1)){if((j<0&&h<0)||(j>1&&h>1)){p=new Intersection("Outside")}else{p=new Intersection("Inside")}}else{p=new Intersection("Intersection");if(0<=j&&j<=1){p.points.push(i.lerp(g,j))}if(0<=h&&h<=1){p.points.push(i.lerp(g,h))}}}}return p};Intersection.intersectCirclePolygon=function(h,a,j){var k=new Intersection("No Intersection");var e=j.length;var f;for(var g=0;g<e;g++){var d=j[g];var b=j[(g+1)%e];f=Intersection.intersectCircleLine(h,a,d,b);k.appendPoints(f.points)}if(k.points.length>0){k.status="Intersection"}else{k.status=f.status}return k};Intersection.intersectCircleRectangle=function(l,a,d,b){var f=d.min(b);var m=d.max(b);var e=new Point2D(m.x,f.y);var k=new Point2D(f.x,m.y);var j=Intersection.intersectCircleLine(l,a,f,e);var i=Intersection.intersectCircleLine(l,a,e,m);var h=Intersection.intersectCircleLine(l,a,m,k);var g=Intersection.intersectCircleLine(l,a,k,f);var n=new Intersection("No Intersection");n.appendPoints(j.points);n.appendPoints(i.points);n.appendPoints(h.points);n.appendPoints(g.points);if(n.points.length>0){n.status="Intersection"}else{n.status=j.status}return n};Intersection.intersectEllipseEllipse=function(o,r,e,n,q,d){var t=[e*e,0,r*r,-2*e*e*o.x,-2*r*r*o.y,e*e*o.x*o.x+r*r*o.y*o.y-r*r*e*e];var s=[d*d,0,q*q,-2*d*d*n.x,-2*q*q*n.y,d*d*n.x*n.x+q*q*n.y*n.y-q*q*d*d];var c=Intersection.bezout(t,s);var j=c.getRoots();var u=0.001;var m=(t[0]*t[0]+2*t[1]*t[1]+t[2]*t[2])*u;var k=(s[0]*s[0]+2*s[1]*s[1]+s[2]*s[2])*u;var i=new Intersection("No Intersection");for(var g=0;g<j.length;g++){var l=new Polynomial(t[0],t[3]+j[g]*t[1],t[5]+j[g]*(t[4]+j[g]*t[2]));var f=l.getRoots();for(var h=0;h<f.length;h++){var p=(t[0]*f[h]+t[1]*j[g]+t[3])*f[h]+(t[2]*j[g]+t[4])*j[g]+t[5];if(Math.abs(p)<m){p=(s[0]*f[h]+s[1]*j[g]+s[3])*f[h]+(s[2]*j[g]+s[4])*j[g]+s[5];if(Math.abs(p)<k){i.appendPoint(new Point2D(f[h],j[g]))}}}}if(i.points.length>0){i.status="Intersection"}return i};Intersection.intersectEllipseLine=function(q,h,g,x,v){var k;var w=new Vector2D(x.x,x.y);var n=Vector2D.fromPoints(x,v);var s=new Vector2D(q.x,q.y);var m=w.subtract(s);var f=new Vector2D(n.x/(h*h),n.y/(g*g));var e=new Vector2D(m.x/(h*h),m.y/(g*g));var u=n.dot(f);var r=n.dot(e);var q=m.dot(e)-1;var p=r*r-u*q;if(p<0){k=new Intersection("Outside")}else{if(p>0){var o=Math.sqrt(p);var j=(-r-o)/u;var i=(-r+o)/u;if((j<0||1<j)&&(i<0||1<i)){if((j<0&&i<0)||(j>1&&i>1)){k=new Intersection("Outside")}else{k=new Intersection("Inside")}}else{k=new Intersection("Intersection");if(0<=j&&j<=1){k.appendPoint(x.lerp(v,j))}if(0<=i&&i<=1){k.appendPoint(x.lerp(v,i))}}}else{var l=-r/u;if(0<=l&&l<=1){k=new Intersection("Intersection");k.appendPoint(x.lerp(v,l))}else{k=new Intersection("Outside")}}}return k};Intersection.intersectEllipsePolygon=function(g,b,a,k){var l=new Intersection("No Intersection");var d=k.length;for(var f=0;f<d;f++){var j=k[f];var h=k[(f+1)%d];var e=Intersection.intersectEllipseLine(g,b,a,j,h);l.appendPoints(e.points)}if(l.points.length>0){l.status="Intersection"}return l};Intersection.intersectEllipseRectangle=function(m,b,a,e,d){var g=e.min(d);var n=e.max(d);var f=new Point2D(n.x,g.y);var l=new Point2D(g.x,n.y);var k=Intersection.intersectEllipseLine(m,b,a,g,f);var j=Intersection.intersectEllipseLine(m,b,a,f,n);var i=Intersection.intersectEllipseLine(m,b,a,n,l);var h=Intersection.intersectEllipseLine(m,b,a,l,g);var o=new Intersection("No Intersection");o.appendPoints(k.points);o.appendPoints(j.points);o.appendPoints(i.points);o.appendPoints(h.points);if(o.points.length>0){o.status="Intersection"}return o};Intersection.intersectLineLine=function(e,c,i,h){var j;var f=(h.x-i.x)*(e.y-i.y)-(h.y-i.y)*(e.x-i.x);var g=(c.x-e.x)*(e.y-i.y)-(c.y-e.y)*(e.x-i.x);var d=(h.y-i.y)*(c.x-e.x)-(h.x-i.x)*(c.y-e.y);if(d!=0){var b=f/d;var a=g/d;if(0<=b&&b<=1&&0<=a&&a<=1){j=new Intersection("Intersection");j.points.push(new Point2D(e.x+b*(c.x-e.x),e.y+b*(c.y-e.y)))}else{j=new Intersection("No Intersection")}}else{if(f==0||g==0){j=new Intersection("Coincident")}else{j=new Intersection("Parallel")}}return j};Intersection.intersectLinePolygon=function(b,a,h){var j=new Intersection("No Intersection");var c=h.length;for(var e=0;e<c;e++){var g=h[e];var f=h[(e+1)%c];var d=Intersection.intersectLineLine(b,a,g,f);j.appendPoints(d.points)}if(j.points.length>0){j.status="Intersection"}return j};Intersection.intersectLineRectangle=function(b,a,d,c){var f=d.min(c);var l=d.max(c);var e=new Point2D(l.x,f.y);var k=new Point2D(f.x,l.y);var j=Intersection.intersectLineLine(f,e,b,a);var i=Intersection.intersectLineLine(e,l,b,a);var h=Intersection.intersectLineLine(l,k,b,a);var g=Intersection.intersectLineLine(k,f,b,a);var m=new Intersection("No Intersection");m.appendPoints(j.points);m.appendPoints(i.points);m.appendPoints(h.points);m.appendPoints(g.points);if(m.points.length>0){m.status="Intersection"}return m};Intersection.intersectPolygonPolygon=function(f,e){var c=new Intersection("No Intersection");var h=f.length;for(var g=0;g<h;g++){var d=f[g];var b=f[(g+1)%h];var a=Intersection.intersectLinePolygon(d,b,e);c.appendPoints(a.points)}if(c.points.length>0){c.status="Intersection"}return c};Intersection.intersectPolygonRectangle=function(k,b,a){var d=b.min(a);var j=b.max(a);var c=new Point2D(j.x,d.y);var i=new Point2D(d.x,j.y);var h=Intersection.intersectLinePolygon(d,c,k);var g=Intersection.intersectLinePolygon(c,j,k);var f=Intersection.intersectLinePolygon(j,i,k);var e=Intersection.intersectLinePolygon(i,d,k);var l=new Intersection("No Intersection");l.appendPoints(h.points);l.appendPoints(g.points);l.appendPoints(f.points);l.appendPoints(e.points);if(l.points.length>0){l.status="Intersection"}return l};Intersection.intersectRayRay=function(d,b,h,g){var i;var e=(g.x-h.x)*(d.y-h.y)-(g.y-h.y)*(d.x-h.x);var f=(b.x-d.x)*(d.y-h.y)-(b.y-d.y)*(d.x-h.x);var c=(g.y-h.y)*(b.x-d.x)-(g.x-h.x)*(b.y-d.y);if(c!=0){var a=e/c;i=new Intersection("Intersection");i.points.push(new Point2D(d.x+a*(b.x-d.x),d.y+a*(b.y-d.y)))}else{if(e==0||f==0){i=new Intersection("Coincident")}else{i=new Intersection("Parallel")}}return i};Intersection.intersectRectangleRectangle=function(b,a,l,j){var d=b.min(a);var k=b.max(a);var c=new Point2D(k.x,d.y);var i=new Point2D(d.x,k.y);var h=Intersection.intersectLineRectangle(d,c,l,j);var g=Intersection.intersectLineRectangle(c,k,l,j);var f=Intersection.intersectLineRectangle(k,i,l,j);var e=Intersection.intersectLineRectangle(i,d,l,j);var m=new Intersection("No Intersection");m.appendPoints(h.points);m.appendPoints(g.points);m.appendPoints(f.points);m.appendPoints(e.points);if(m.points.length>0){m.status="Intersection"}return m};Intersection.bezout=function(n,l){var i=n[0]*l[1]-l[0]*n[1];var h=n[0]*l[2]-l[0]*n[2];var g=n[0]*l[3]-l[0]*n[3];var f=n[0]*l[4]-l[0]*n[4];var e=n[0]*l[5]-l[0]*n[5];var b=n[1]*l[2]-l[1]*n[2];var a=n[1]*l[4]-l[1]*n[4];var o=n[1]*l[5]-l[1]*n[5];var m=n[2]*l[3]-l[2]*n[3];var d=n[3]*l[4]-l[3]*n[4];var c=n[3]*l[5]-l[3]*n[5];var k=o+d;var j=a-m;return new Polynomial(i*b-h*h,i*j+g*b-2*h*f,i*k+g*j-f*f-2*h*e,i*c+g*k-2*f*e,g*c-e*e)};